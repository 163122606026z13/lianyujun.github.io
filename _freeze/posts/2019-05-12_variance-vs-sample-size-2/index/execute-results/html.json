{
  "hash": "5b21820141638875503832ad1aa1c358",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sample variance at small sample sizes II: distributions\"\nsubtitle: \"How does sample size affect the distribution of sample variance?\"\nauthor: \"Vikram B. Baliga\"\ncategories:\n  - R\n  - variance\n  - sample-size\ndate: 2019-05-12\ntoc: true\nimage: \"variance-small-sample-size2.png\"\n---\n\n\nIn a previous post, I showed that although sample variance, on average, gives an\nunbiased estimate of population variance, it is highly unreliable at extremely\nsmall sample sizes.\n\nThis time, I will focus more closely on the distribution of sample variance. How\ndoes sample size seem to affect the distribution of sample variance? And how\nmight this inform how we determine which sample sizes are too small? I'll use\none of my favorite new(ish) packages, `ggridges`, to plot the sets of\ndistributions from one example simulation.\n\n## 'Behavior' of sample variance at small sample sizes.\n\nI'll first re-create part of what I showed in my previous post but on a\ndifferent scale. We'll simulate a dataset for a 'parent' population and then\ntake many random samples of increasingly larger sample sizes to get a sense of\nhow sample variance behaves.\n\nTo cut down on time, I will only take samples at particular sample sizes, based\non the sample sizes which seemed interesting (to me!) in the previous post.\n\nI'll keep this code tucked away so we can move quickly. Click the text below to\nsee all the code if you'd like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean = 0\nSD = 20\npopsize = 1000\n\nset.seed(123) # to get the same parent pop as last time\npop <- rnorm(popsize, mean, SD)\n\n# verify that we get the same variance as last time\nvar(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 393.3836\n```\n\n\n:::\n\n```{.r .cell-code}\n# pick specific Ns this time\nNs <- c(2, 3, 5, 10, 15, 30, 45, \n        90, 180, 250, 500, 750)\nreps = 1000\n\nvar.p <- function(x) {\n  var(x) * (length(x) - 1) / length(x)\n}\n\n# Please note that I don't use set.seed() here.\n# So these samples will not be identical to those we\n# got in mymat & varmat last time.\nvarmat = matrix(nrow = length(Ns), ncol = reps)\nfor (i in 1:dim(varmat)[1])\n{\n  for (j in 1:dim(varmat)[2])\n  {\n    varmat[i, j] = var(sample(pop, Ns[i]))\n  }\n}\nrownames(varmat) <- Ns\n\nplot(\n  rep(2, ncol(varmat)),\n  varmat[1,],\n  ylim = c(0, max(varmat)),\n  xlim = c(0, (max(Ns) + 50)),\n  pch = 19,\n  col = rgb(0, 0, 0, alpha = 0.2),\n  xlab = 'sample size',\n  ylab = 'sample variance',\n  tck = 0.02,\n  bty = \"n\"\n)\nfor (i in 2:length(Ns)) {\n  points(rep(Ns[i], ncol(varmat)),\n         varmat[i,],\n         pch = 19,\n         col = rgb(0, 0, 0, alpha = 0.2))\n}\nabline(h = var.p(pop),\n       col = rgb(0, 0, 1, alpha = 0.5),\n       lwd = 3)\npoints(Ns, rowMeans(varmat),\n       col = 'orange', pch = 19)\nlegend(300, 3000, \n       legend=c(\"True population variance\",\n                \"Means of sample variance\"),\n       col=c(rgb(0, 0, 1, alpha = 0.5), \"orange\"), \n       lty=1, lwd=3, box.lty=0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/parent_pop-1.png){width=1800}\n:::\n\n```{.r .cell-code}\nplot(\n  rep(2, ncol(varmat)),\n  varmat[1,],\n  ylim = c(0, max(varmat)),\n  xlim = c(0, 15),\n  pch = 19,\n  col = rgb(0, 0, 0, alpha = 0.2),\n  xlab = 'sample size',\n  ylab = 'sample variance',\n  tck = 0.02,\n  bty = \"n\"\n)\nfor (i in 2:length(Ns)) {\n  points(rep(Ns[i], ncol(varmat)),\n         varmat[i,],\n         pch = 19,\n         col = rgb(0, 0, 0, alpha = 0.2))\n}\nabline(h = var.p(pop),\n       col = rgb(0, 0, 1, alpha = 0.5),\n       lwd = 3)\npoints(Ns, rowMeans(varmat),\n       col = 'orange', pch = 19)\nlegend(5, 4000, \n       legend=c(\"True population variance\",\n                \"Means of sample variance\"),\n       col=c(rgb(0, 0, 1, alpha = 0.5), \"orange\"), \n       lty=1, lwd=3, box.lty=0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/parent_pop-2.png){width=1800}\n:::\n:::\n\n\nThis looks generally similar to the first figure from my previous post. The\nparent population is identical to the one I used previous, as I called\n`set.seed(123)` prior to each simulation. But I did not use `set.seed()` prior\nto sampling from the parent, which means that `varmat` will be different each\ntime.\n\nIt may be hard to see what's going on at the smallest sample sizes, so here's\nthe data at sample size \\>= 15:\n\nOf course, it's (hopefully) very likely that no published study would try to say\nanything conclusive about population variance based on a sample size of 2 or 3.\n\n## Distributions of sample variance at each sample size\n\nWe'll now take a look at how the distributions of sample variance at each sample\nsize (i.e. each vertical strip) vary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First load | install&load packages we'll need\npackages = c(\"ggplot2\", \"ggridges\", \"tidyr\", \n             \"forcats\", \"dplyr\",\"viridis\")\n# See this post for info on this code chunk\npackage.check <- lapply(\n  packages,\n  FUN = function(x) {\n    if (!require(x, character.only = TRUE)) {\n      install.packages(x, dependencies = TRUE)\n      library(x, character.only = TRUE)\n    }\n  }\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\t/var/folders/8k/s3cltr015b37qj74wmpvcgmc0000gn/T//Rtmpka5HEp/downloaded_packages\n\nThe downloaded binary packages are in\n\t/var/folders/8k/s3cltr015b37qj74wmpvcgmc0000gn/T//Rtmpka5HEp/downloaded_packages\n```\n\n\n:::\n\n```{.r .cell-code}\n# Re-organize our data in tidy format\ndf <- tidyr::gather(as.data.frame(t(varmat)))\n# Sorting data so it appears on the y-axis in the \n# correct order is tricky in ggplot2.\n# We'll use dplyr::mutate() with forcats::fct_relevel()\n# to re-organize the data prior to plotting\ndf %>% mutate(key = fct_relevel(key, as.character(Ns))) -> df\n\n# Use ggplot() with ggridges::geom_density_ridges2()\n# The coord_flip() argument flips the axes so they are\n# in the same orientation as in the previous figure.\np <- ggplot(df, aes(x = value, y = key)) +\n  geom_vline(\n    xintercept = var.p(pop),\n    col = rgb(0, 0, 1, alpha = 0.5),\n    lwd = 1\n  ) +\n  geom_density_ridges2(\n    rel_min_height = 0.001,\n    scale = 2,\n    fill = rgb(0, 0, 0, alpha = 0.75)\n  ) +\n  coord_flip() +\n  ylab(\"sample size\") + xlab(\"sample variance\") +\n  \n  theme_ridges()\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/samples_ggridges-1.png){width=1800}\n:::\n\n```{.r .cell-code}\nmedianz<-apply(varmat,1,median)\nmeanz<-apply(varmat,1,mean)\n\nplot(\n  Ns,\n  meanz,\n  pch = 19,\n  col = \"#42AB5D\",\n  xlab = \"sample size\",\n  ylab = \"value\",\n  ylim = c(0, (max(meanz) + 100)),\n  xlim = c(0, (max(Ns) + 50)),\n  tck = 0.02,\n  bty = \"n\"\n)\npoints(\n  Ns,\n  medianz,\n  pch = 19,\n  col = \"#DD3497\",\n  ylab = \"value\",\n  xlab = \"sample size\"\n)\nabline(h = var.p(pop),\n       col = rgb(0, 0, 1, alpha = 0.5),\n       lwd = 3)\nlegend(\n  300,\n  200,\n  legend = c(\"Means of sample variance\",\n             \"Medians of sample variance\"),\n  col = c(\"#42AB5D\", \"#DD3497\"),\n  pch = 19,\n  box.lty = 0\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/samples_ggridges-2.png){width=1800}\n:::\n:::\n\n\nAt small sample sizes, we see extremely skewed distributions of sample variance.\nFor sample size = 15 or below (among our cherry-picked examples), we're seeing\nextremely long right-tailed distributions. The shapes of the distributions\nindicate that median and/or mode might strongly differ from the mean sample\nvariance. Let's take a look.\n\nWe'll just focus on median vs. mean:\n\nSo at small sample sizes, the means of sample variance are close to but\novershoop our population variance, whereas the medians sharply underestimate\npopulation variance.\n\nBut at sample sizes over 45, means and medians of sample variance are nearly\nidentical to the true population variance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# not added\nEnvStats::epdfPlot(varmat[12, ],\n                   xlim = c(-500, 1500),\n                   epdf.col = viridis(12)[12])\nfor (i in 11:1) {\n  EnvStats::epdfPlot(varmat[i, ],\n                     epdf.col = viridis(12)[i], \n                     add = TRUE)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n🐢\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}